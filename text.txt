
const express = require('express');
const sqlite3 = require('sqlite3');
const path = require('path');

const app = express();
const port = 3000;

// Conexão com o banco de dados
const db = new sqlite3.Database('estoque.db');

// Middleware para análise de dados do formulário
app.use(express.urlencoded({ extended: true }));

// Adicione este middleware para analisar dados JSON
app.use(express.json());

// Configurar o Express para servir arquivos estáticos
app.use('/assets', express.static(path.join(__dirname, 'assets')));


// Função genérica para contar dados de uma tabela específica
function contarDados(tabela, callback) {
    const sql = `SELECT COUNT(*) AS total FROM ${tabela}`;
    db.get(sql, (err, row) => {
        if (err) {
            console.error(`Erro ao contar dados da tabela ${tabela}:`, err.message);
            callback(err, null);
        } else {
            console.log(`Total de itens na tabela ${tabela}:`, row.total);
            if (callback && typeof callback === 'function') {
                callback(null, row.total);
            }
        }
    });
}

// Rota GET para contar o número de itens em uma tabela específica
app.get('/contar/:tabela', (req, res) => {
    const tabela = req.params.tabela;
    contarDados(tabela, (err, total) => {
        if (err) {
            res.status(500).send(`Erro ao contar dados da tabela ${tabela}`);
        } else {
            res.send(total.toString());
        }
    });
});

// Adicione rotas semelhantes para as tabelas restantes aqui
app.get('/contar/fontes', (req, res) => {
    contarDados('fontes', (err, total) => {
        if (err) {
            res.status(500).send('Erro ao contar dados da tabela fontes');
        } else {
            res.send(total.toString());
        }
    });
});

app.get('/contar/gabinetes', (req, res) => {
    contarDados('gabinetes', (err, total) => {
        if (err) {
            res.status(500).send('Erro ao contar dados da tabela gabinetes');
        } else {
            res.send(total.toString());
        }
    });
});

app.get('/contar/processadores', (req, res) => {
    contarDados('processadores', (err, total) => {
        if (err) {
            res.status(500).send('Erro ao contar dados da tabela processadores');
        } else {
            res.send(total.toString());
        }
    });
});

app.get('/contar/monitores', (req, res) => {
    contarDados('monitores', (err, total) => {
        if (err) {
            res.status(500).send('Erro ao contar dados da tabela monitores');
        } else {
            res.send(total.toString());
        }
    });
});

app.get('/contar/nobreaks', (req, res) => {
    contarDados('nobreaks', (err, total) => {
        if (err) {
            res.status(500).send('Erro ao contar dados da tabela monitores');
        } else {
            res.send(total.toString());
        }
    });
});


function recuperarDados(tabela, res) {
    const sql = `SELECT * FROM ${tabela}`;
    db.all(sql, (err, rows) => {
        if (err) {
            console.error('Erro ao consultar dados:', err.message);
            res.status(500).send('Erro ao consultar dados');
        } else {
            console.log(`Dados recuperados da tabela ${tabela}:`, rows);
            res.json(rows);
        }
    });
}




// Rota GET para a página inicial
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Rota POST para adicionar itens
app.post('/adicionar/:tabela', (req, res) => {
    const tabela = req.params.tabela;
    // Certifique-se de que todos os campos necessários estejam sendo extraídos do req.body
    const { 
        nomeproduto, 
        tipo, 
        codigo_de_barras, 
        marca, 
        modelo, 
        ddr, 
        numero_de_serie, 
        portas_saida, 
        tipo_soquete, 
        slots_de_memoria, 
        potencia_watts, 
        amperagem, 
        tamanho_polegadas, 
        entradas, 
        observacao, 
        frequencia, 
        capacidade,
        potencia, 
        autonomia, 
        tensao_entrada, 
        tensao_saida, 
        capacidade_bateria, 
        capacidade_bateria_desc, 
        tipo_bateria, 
        numero_de_baterias 
    } = req.body;
    
    

    // Verifique se a tabela existe
    const tabelasPermitidas = ['memorias_ram', 'gabinetes', 'placas_video', 'placas_mae', 'fontes', 'gabinetes', 'processadores', 'monitores', 'nobreaks'];
    if (!tabelasPermitidas.includes(tabela)) {
        return res.status(400).send('Tabela inválida');
    }

    // Insira os dados na tabela especificada
    let sql;
    let values;
    switch (tabela) {
        case 'placas_mae':
            sql = `INSERT INTO ${tabela} (nomeproduto, codigo_de_barras, marca, modelo, numero_de_serie, tipo_soquete, slots_de_memoria, observacao) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`;
            values = [nomeproduto, codigo_de_barras, marca, modelo, numero_de_serie, tipo_soquete, slots_de_memoria, observacao];
            break;
        case 'placas_video':
            sql = `INSERT INTO ${tabela} (nomeproduto, codigo_de_barras, marca, modelo, ddr, numero_de_serie, portas_saida, observacao) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`;
            values = [nomeproduto, codigo_de_barras, marca, modelo, ddr, numero_de_serie, portas_saida, observacao];
            break;
        case 'fontes':
            sql = `INSERT INTO ${tabela} (nomeproduto, tipo, codigo_de_barras, modelo, marca, numero_de_serie, potencia_watts, amperagem, observacao) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`;
            values = [nomeproduto, tipo, codigo_de_barras, modelo, marca, numero_de_serie, potencia_watts, amperagem, observacao];
            break;
        case 'gabinetes':
            sql = `INSERT INTO ${tabela} (nomeproduto, codigo_de_barras, modelo, marca, numero_de_serie, observacao) VALUES (?, ?, ?, ?, ?, ?)`;
            values = [nomeproduto, codigo_de_barras, modelo, marca, numero_de_serie, observacao];
            break;
        case 'processadores':
            sql = `INSERT INTO ${tabela} (nomeproduto, codigo_de_barras, modelo, marca, numero_de_serie, tipo_soquete, observacao) VALUES (?, ?, ?, ?, ?, ?, ?)`;
            values = [nomeproduto, codigo_de_barras, modelo, marca, numero_de_serie, tipo_soquete, observacao];
            break;
        case 'monitores':
            sql = `INSERT INTO ${tabela} (nomeproduto, codigo_de_barras, marca, modelo, numero_de_serie, tamanho_polegadas, entradas, observacao) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`;
            values = [nomeproduto, codigo_de_barras, marca, modelo, numero_de_serie, tamanho_polegadas, entradas, observacao];
            break;
        case 'memorias_ram':
            sql = `INSERT INTO ${tabela} (nomeproduto, tipo, codigo_de_barras, marca, modelo, ddr, numero_de_serie, frequencia, capacidade, observacao) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
            values = [nomeproduto, tipo, codigo_de_barras, marca, modelo, ddr, numero_de_serie, frequencia, capacidade, observacao];
            break;
            case 'nobreaks':
                sql = `INSERT INTO ${tabela} (nomeproduto, tipo, codigo_de_barras, marca, modelo, potencia, autonomia, tensao_entrada, tensao_saida, capacidade_bateria, capacidade_bateria_desc, tipo_bateria, numero_de_baterias, observacao) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
                values = [nomeproduto, tipo, codigo_de_barras, marca, modelo, potencia, autonomia, tensao_entrada, tensao_saida, capacidade_bateria, capacidade_bateria_desc, tipo_bateria, numero_de_baterias, observacao];
                break;
            
    }

// Rota para inserir dados em qualquer tabela
app.post('/inserir/:tabela', (req, res) => {
    const tabela = req.params.tabela;
    const { values } = req.body; // Valores a serem inseridos
    const sql = `INSERT INTO ${tabela} VALUES (${values.map(() => '?').join(', ')})`;
    db.run(sql, values, (err) => {
        if (err) {
            return console.error(`Erro ao inserir dados na tabela ${tabela}:`, err.message);
        }

        // Após inserir os dados no banco, consulte-os novamente e envie-os para o cliente
        db.all(`SELECT * FROM ${tabela}`, (err, rows) => {
            if (err) {
                return console.error(`Erro ao consultar dados da tabela ${tabela}:`, err.message);
            }
            res.json(rows); // Envie os dados inseridos de volta para o cliente como JSON

            // Atualize a contagem de dados na tabela correspondente
            contarDados(tabela, res);
        });
    });
});
});


// Rota GET para recuperar dados da tabela de placas_video
app.get('/recuperar/placas_video', (req, res) => {
    recuperarDados('placas_video', res);
});

// Rota GET para recuperar dados da tabela de memorias_ram
app.get('/recuperar/memorias_ram', (req, res) => {
    recuperarDados('memorias_ram', res);
});

// Rota GET para recuperar dados da tabela de placas_mae
app.get('/recuperar/placas_mae', (req, res) => {
    recuperarDados('placas_mae', res);
});


// Rota GET para recuperar dados da tabela de fontes
app.get('/recuperar/fontes', (req, res) => {
    recuperarDados('fontes', res);
});

// Rota GET para recuperar dados da tabela de gabinetes
app.get('/recuperar/gabinetes', (req, res) => {
    recuperarDados('gabinetes', res);
});

// Rota GET para recuperar dados da tabela de processadores
app.get('/recuperar/processadores', (req, res) => {
    recuperarDados('processadores', res);
});

// Rota GET para recuperar dados da tabela de monitores
app.get('/recuperar/monitores', (req, res) => {
    recuperarDados('monitores', res);
});

app.get('/recuperar/nobreaks', (req, res) => {
    recuperarDados('nobreaks', res);
});


const cors = require('cors');
app.use(cors());



// Inicie o servidor
app.listen(port, () => {
    console.log(`Servidor está ouvindo em http://localhost:${port}`);

});